{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cv",
				"CV_8UC1"
			],
			[
				"im",
				"img_fx2"
			],
			[
				"inte",
				"intensity_mat"
			],
			[
				"intensity",
				"intensity_mats"
			],
			[
				"src",
				"src_imgs"
			],
			[
				"img",
				"img_dir"
			],
			[
				"comm",
				"comment_timestamp"
			],
			[
				"harri",
				"harris_laplacian1"
			],
			[
				"ma",
				"maximum"
			],
			[
				"string",
				"stringstream"
			],
			[
				"harris",
				"harris_laplacian"
			],
			[
				"gau",
				"gaussian_filter"
			],
			[
				"g_f",
				"g_fy2"
			],
			[
				"w",
				"w"
			],
			[
				"x",
				"x"
			],
			[
				"pro",
				"cross_product_z"
			]
		]
	},
	"buffers":
	[
		{
			"file": "asign0703/harris_corner.cpp",
			"settings":
			{
				"buffer_size": 12888,
				"line_ending": "Unix",
				"name": "harris_corner.cpp"
			}
		},
		{
			"file": "asign0710/sift_descriptor.cpp",
			"settings":
			{
				"buffer_size": 10355,
				"line_ending": "Unix",
				"name": "sift_descriptor.cpp"
			}
		},
		{
			"file": "asign0710/sift.sh",
			"settings":
			{
				"buffer_size": 121,
				"line_ending": "Unix",
				"name": "sift.sh"
			}
		},
		{
			"file": "asign0703/harris.sh",
			"settings":
			{
				"buffer_size": 113,
				"line_ending": "Unix",
				"name": "harris.sh"
			}
		},
		{
			"file": "asign0626/get_position.cpp",
			"settings":
			{
				"buffer_size": 2188,
				"line_ending": "Unix"
			}
		},
		{
			"file": "asign0501/affin.cpp",
			"settings":
			{
				"buffer_size": 6281,
				"line_ending": "Unix"
			}
		},
		{
			"file": "asign0423/drawLine.hpp",
			"settings":
			{
				"buffer_size": 6574,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/camera.hpp",
			"settings":
			{
				"buffer_size": 6589,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <opencv2/opencv.hpp>\n#include <sstream>\n#include <fstream>\n#include <iostream>\n#include <istream>\n// #include <string>\n#include <math.h>\n#include <opencv2/highgui/highgui.hpp>\n#include \"../lib/camera.hpp\"\n#include \"../lib/affin.hpp\"\n#include \"../lib/transform_3d.hpp\"\n#define N  3\n\ncv::Mat_<double> homo_graphy(std::vector<cv::Point3d>  x_1,  std::vector<cv::Point3d>  x_2 ) ;\nstd::vector<cv::Point3d> read_positions(char*  file_name) ;\n\nint main() {\n	std::vector<cv::Point3d>x_1;\n	std::vector<cv::Point3d>x_2 ;\n\n	char* file_names[] = {\"chess1.txt\", \"chess2.txt\", \"chess3.txt\"};\n	x_1 = read_positions(\"world.txt\");\n\n	cv::Mat V;\n	cv::Mat w, u, vt;  // vt(9, 9)	\n	////////  read imgs\n	for (unsigned j=0; j < 3; j++) {\n		// std::cout << file_names[i] << std::endl;\n		x_2 = read_positions(file_names[j]);\n		std::cout << \"chess\" << j+1 << \"\\t=\" << x_2 << std::endl;\n		/////////  homography matrix\n		cv::Mat_<double> H = homo_graphy(x_1, x_2);	\n\n		 ////////////////////  Vi = (v12, (v11 - v22) )\n		 cv::Mat v_12 = (cv::Mat_<double>(1,6) <<  H(0,0)*H(0,1),  			    H(0,0)*H(1,1) + H(1,0)*H(0,1),    H(1,0)*H(1,1),\n										H(2,0)*H(0,1) + H(0,0)*H(2,1),    H(2,0)*H(1,1) + H(1,0)*H(2,1),    H(2,0)*H(2,1) ) ;\n		 cv::Mat v_11 = (cv::Mat_<double>(1,6) << H(0, 0)*H(0,0), 	H(0,0)*H(1,0)*1,  H(1,0)*H(1,0),\n										H(2,0)*H(0,0)*1,  H(2,0)*H(1,0)*1,  H(2,0)*H(2,0));\n		 cv::Mat v_22 = (cv::Mat_<double>(1,6) << H(0, 1)*H(0,1) ,      H(0,1)*H(1,1) *1,  H(1,1)*H(1,1),\n										H(2,1)*H(0,1)*1 ,   H(2,1)*H(1,1)*1,   H(2,1)*H(2,1));\n\n		 std::cout << \"v_12\\t=\" << v_12 << std::endl;\n		 std::cout << \"v_11\\t=\" << v_11 << std::endl;\n		 std::cout << \"v_22\\t=\" << v_22 << std::endl;\n		 /////////////////   V = sum(Vi)\n		 V.push_back(v_12);\n		 cv::Mat v_11_22 = v_11 - v_22;\n		 V.push_back(v_11_22);\n		 std::cout << \"\" << std::endl;\n	}\n	 ////////////////// estimation of intrinsic camera parameter \n	 //////////////////// V^t*V least gen\n	std::cout << \"V\\t=\" <<  V << std::endl;\n	cv::SVD::compute(V, w, u, vt, cv::SVD::FULL_UV);\n	std::cout << \"w\\t=\" <<  w << endl;\n	std::cout << \"u\\t=\" << u << endl;\n	std::cout << \"vt\\t=\" << vt << endl;\n\n	cv::Mat_<double>  b =  vt.row(5);\n	std::cout << \"b\\t= \" << b << std::endl;\n\n	////////  B = B11, B12, B13, \n	/////////        B12, B22, B23, \n	 ////////          B13, B23, B33\n	//////// b = B11, B12, B22, B13, B23, B33\n	////////         B[0][0], B[1][0], B[2][0], B[2][1], B[2][2]\n	cv::Mat_<double> B = (cv::Mat_<double>(3,3)  <<  b(0,0), b(0,1), b(0,3), \n									b(0,1), b(0,2), b(0,4), \n									b(0,3), b(0,4), b(0,5) );\n	std::cout << \"B\\t= \" << B << std::endl;\n\n	/////////  intrinsic parameter\n	double u0, v0, alpha, beta, gamma, lamda;\n	v0 		= (B(0, 1)*B(0,2) - B(0,0)*B(1,2)) / (B(0,0)*B(1,1) - B(0,1)*B(0,1)) ;\n	lamda 	= B(2,2) - (B(0,2)*B(0,2) + v0*(B(0,1)*B(0,2) - B(0,0)*B(1,2))) / B(0,0) ;\n	beta	= sqrt( lamda*B(0,0) / (B(0,0)*B(1,1) - B(0,1)*B(0,1)) ) ;\n	alpha	= sqrt(lamda/B(0,0)) ;\n	gamma	=  -B(0,1)*beta / B(0,0) ; //-(B(0,1)*alpha*alpha*beta/lamda) ;\n	u0		= (gamma*v0 / alpha) -  B(0,2) / B(0,0) ;  //(B(0,2)*alpha*alpha / lamda) ;\n	std::cout << \"lamda\\t=\" << lamda << std::endl << \"alpha\\t=\" << alpha << std::endl;\n	cv::Mat K =  (cv::Mat_<double>(3,3)  <<  alpha, gamma, u0,		0, beta, v0,	0, 0, 1);\n	std::cout << \"K\\t= \" << K << std::endl;\n\n	return 0;\n}\n\nstd::vector<cv::Point3d> read_positions(char*  file_name) {\n	std::vector<cv::Point3d> x_2;\n	double x, y;\n\n	std::ifstream file(file_name);\n	for (int i=0; i<N; i++) {\n		file >> x >> y;\n		cv::Point3d  x2i(x, y, 1); \n		x_2.push_back(x2i);\n	}\n	return x_2;\n}\n\ncv::Mat_<double> homo_graphy(std::vector<cv::Point3d>  x_1,  std::vector<cv::Point3d>  x_2 ) {\n	cv::Mat A;\n	cv::Mat w, u, vt;  // vt(9, 9)	\n	for (int i=0; i<(int)x_1.size(); i++) {\n		// std::cout << \"i=\" << i << \",  x_1=\" << x_1[i] << \",  x_2=\" << x_2 [i]<< std::endl;\n		int x1 = x_1[i].x, y1 = x_1[i].y, w1 = x_1[i].z; \n		int x2 = x_2[i].x, y2 = x_2[i].y, z2 = x_2[i].z; \n		cv::Mat  Ai = (cv::Mat_<double> (2,9)  << 0, 0,0,  				-w1*x2, -w1*y2, -w1*z2,   	y1*x2, y1*y2, y1*z2,\n										w1*x2, w1*y2, w1*z2, 	0, 0, 0,  				-x1*x2, -x1*y2, -x1*z2);\n		A.push_back(Ai); \n	}\n	// std::cout << \"A\" << std::endl << A << std::endl;\n	cv::SVD::compute(A, w, u, vt, cv::SVD::FULL_UV);\n	////////////////////   h1, h2, h3 =  [vt00, vt10, vt20, ... , vt80]\n	////////////////////   H = [h1, h2, h3]\n	// std::cout << \"w=\" <<  w << endl;\n	// std::cout << \"u=\" << u << endl;\n	// std::cout << \"vt=\" << vt << endl;\n	cv::Mat H = (cv::Mat_<double> (3, 3)  <<  vt.at<double>(8,0) , vt.at<double>(8,1) , vt.at<double>(8,2) , vt.at<double>(8,3) , vt.at<double>(8,4) , \n		vt.at<double>(8,5) , vt.at<double>(8,6) , vt.at<double>(8,7) , vt.at<double>(8,8)  );\n	 std::cout << \"H\\t=  \" << H << std::endl;\n	 return H;\n}",
			"file": "asign0619/calib_zhang.cpp",
			"file_size": 4752,
			"file_write_time": 130791793075009345,
			"settings":
			{
				"buffer_size": 4748,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/C++/C++ Single File.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "Package",
		"selected_items":
		[
			[
				"Package",
				"Preferences: Package Control Settings â€“ Default"
			],
			[
				"incre",
				"Indentation: Convert to Tabs"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			"import urllib2,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation') "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/kyota/practice/cpp_practice",
		"/home/kyota/practice/cpp_practice/asign0710",
		"/home/kyota/practice/cpp_practice/lib"
	],
	"file_history":
	[
		"/home/kyota/.config/sublime-text-3/Packages/Function Name Display/Function Name Display.sublime-settings",
		"/home/kyota/.config/sublime-text-3/Packages/User/Function Name Display.sublime-settings",
		"/home/kyota/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/kyota/practice/cpp_practice/asign0508/line.cpp",
		"/home/kyota/practice/cpp_practice/asign0626/fundamental_matrix.sh",
		"/home/kyota/practice/cpp_practice/lib/drawLine.hpp",
		"/home/kyota/practice/cpp_practice/asign0501/ppoint.hpp",
		"/home/kyota/practice/cpp_practice/lib/ppoint.hpp",
		"/home/kyota/practice/cpp_practice/asign0417/cv_practice.cpp",
		"/home/kyota/practice/cpp_practice/asign0522/cg.cpp",
		"/home/kyota/practice/cpp_practice/asign0626/fundamental_matrix.cpp",
		"/home/kyota/practice/cpp_practice/lib/transform_3d.hpp",
		"/home/kyota/practice/cpp_practice/lib/affin.hpp",
		"/home/kyota/practice/cpp_practice/asign0626/imgs/img1.txt",
		"/home/kyota/practice/cpp_practice/asign0626/imgs/img12.txt",
		"/home/kyota/practice/cpp_practice/asign0423/drawLine.hpp",
		"/home/kyota/practice/cpp_practice/asign0626/imgs/img21.txt",
		"/home/kyota/practice/cpp_practice/asign0626/imgs/img22.txt",
		"/home/kyota/practice/cpp_practice/asign0626/imgs/img11.txt",
		"/home/kyota/practice/cpp_practice/asign0619/calib.sh",
		"/home/kyota/practice/cpp_practice/asign0522/transform_3d.hpp",
		"/home/kyota/practice/cpp_practice/asign0626/imgs/img2.txt",
		"/home/kyota/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
		"/home/kyota/practice/cpp_practice/lib/camera.hpp",
		"/home/kyota/practice/cpp_practice/asign0619/world.txt",
		"/home/kyota/practice/cpp_practice/asign0612/homo_graphy.sh",
		"/home/kyota/practice/cpp_practice/asign0619/calib_zhang.cpp",
		"/home/kyota/practice/cpp_practice/asign0612/get_position.cpp",
		"/home/kyota/practice/cpp_practice/asign0612/homo_graphy.cpp",
		"/home/kyota/practice/cpp_practice/asign0619/chess2.txt",
		"/home/kyota/practice/cpp_practice/asign0619/chess3.txt",
		"/home/kyota/practice/cpp_practice/asign0612/projection_matrix.cpp",
		"/home/kyota/practice/cpp_practice/asign0612/transform_3d.hpp",
		"/home/kyota/practice/cpp_practice/asign0612/camera.hpp",
		"/home/kyota/practice/cpp_practice/asign0612/affin.hpp",
		"/home/kyota/practice/cpp_practice/asign0522/skel.hpp",
		"/home/kyota/practice/cpp_practice/asign0612/projection_matrix.sh",
		"/home/kyota/practice/cpp_practice/asign0501/affin.cpp",
		"/home/kyota/practice/cpp_practice/asign0529/camera.cpp",
		"/home/kyota/practice/cpp_practice/asign0612/room1.txt",
		"/home/kyota/practice/cpp_practice/asign0612/room2.txt",
		"/home/kyota/practice/cpp_practice/asign0612/chess2.txt",
		"/home/kyota/practice/cpp_practice/asign0612/chess1.txt",
		"/home/kyota/practice/cpp_practice/asign0501/transform.hpp",
		"/home/kyota/practice/cpp_practice/asign0612/a.out",
		"/home/kyota/practice/cpp_practice/asign0612/calib.sh",
		"/home/kyota/practice/cpp_practice/asign0612/focal.cpp",
		"/home/kyota/practice/cpp_practice/asign0612/pts1.txt",
		"/home/kyota/practice/cpp_practice/asign0612/pts2.txt",
		"/home/kyota/practice/cpp_practice/asign0612/caliblate.cpp",
		"/home/kyota/practice/cpp_practice/asign0529/camera.sh",
		"/home/kyota/practice/cpp_practice/asign0612/main.cpp",
		"/home/kyota/practice/cpp_practice/asign0612/world_position2.txt",
		"/home/kyota/practice/cpp_practice/asign0612/world_position1.txt",
		"/home/kyota/practice/cpp_practice/asign0612/world_position.txt",
		"/home/kyota/practice/cpp_practice/asign0612/pts.txt",
		"/home/kyota/practice/cpp_practice/asign0529/Makefile",
		"/home/kyota/practice/cpp_practice/asign0410/PGM.hpp",
		"/home/kyota/practice/cpp_practice/asign0410/PGM.cpp",
		"/home/kyota/practice/cpp_practice/asign0612/focus.cpp",
		"/home/kyota/practice/cpp_practice/asign0529/world.skel",
		"/home/kyota/practice/cpp_practice/asign0529/cube.skel",
		"/home/kyota/practice/cpp_practice/asign0522/cg.hpp",
		"/home/kyota/practice/cpp_practice/asign0529/camera.hpp",
		"/home/kyota/practice/cpp_practice/asign0529/point.skel",
		"/home/kyota/practice/cpp_practice/asign0529/T.skel",
		"/home/kyota/practice/cpp_practice/asign0522/cg.skel",
		"/home/kyota/practice/cpp_practice/asign0529/square_.skel",
		"/home/kyota/practice/cpp_practice/asign0529/square.skel",
		"/home/kyota/practice/cpp_practice/asign0529/T2.skel",
		"/home/kyota/practice/cpp_practice/asign0529/L1.skel",
		"/home/kyota/practice/cpp_practice/asign0529/L2.skel",
		"/home/kyota/practice/cpp_practice/asign0529/L3.skel",
		"/home/kyota/practice/cpp_practice/asign0529/T_.skel",
		"/home/kyota/.config/sublime-text-3/Packages/User/gcv.sublime-build"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Point2d",
			"mat",
			"char",
			"unsigned char",
			"gned ",
			"char",
			"unsigned char",
			"feature",
			"				\n",
			"x",
			"y",
			";\n",
			"mat_fxy",
			"mat",
			"mat_fy2",
			"mat",
			"mat_fy2",
			"mat",
			"img_d",
			"img",
			"this->img",
			"this->",
			"img",
			", img",
			"1, img",
			", img",
			"img",
			"1, img",
			", img",
			"harris_corner",
			"	\n",
			"\";\n",
			"response",
			"str_y",
			"to_string",
			"double",
			"harris.",
			"get_gaussian",
			"img",
			"get_val",
			"auss",
			"_2",
			"_1",
			"img.",
			"mat_gauss",
			".at",
			"<int>",
			", CV_64FC1",
			"32",
			"fundamental_matrix",
			"x",
			"src",
			"PPoint2d",
			"cv::Point3d",
			"x1[i].x",
			"x",
			"x2[i].x",
			"[i].x",
			"x",
			"i].x",
			"].x",
			"x",
			"].x",
			".x",
			"x*",
			"x*x2",
			"x*",
			"PPoint2d",
			"\n	// std::cout << \"u2=\" << u2 << std::endl;",
			"cv::Point3d",
			"draw_line(",
			"draw",
			"d",
			".",
			"[1]",
			"[0]",
			"[i]",
			"calib_zhang",
			"3",
			"2",
			"1",
			".at<double>(",
			"),",
			",",
			";\n",
			"double",
			"),",
			"at",
			"2",
			")",
			"1)",
			"point4d",
			"7",
			">(7",
			"(",
			"7",
			"1",
			"7,1",
			"7,",
			"z2",
			"y2",
			"x2",
			"y2",
			"2",
			"y1",
			"z2,   ",
			"2,",
			"y2, ",
			"2,",
			" 0",
			" -",
			"y2, ",
			"2,",
			"Point4d",
			"8",
			" ,",
			") ",
			"8,",
			"1",
			"8,1",
			"8,",
			"8,1",
			"8,",
			"1",
			"8,1",
			"8,",
			"7",
			"8, "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "asign0703/harris_corner.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12888,
						"regions":
						{
						},
						"selection":
						[
							[
								12792,
								12792
							]
						],
						"settings":
						{
							"auto_name": "harris_corner.cpp",
							"function_name_status_row": 369,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 6847.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "asign0710/sift_descriptor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10355,
						"regions":
						{
						},
						"selection":
						[
							[
								9719,
								9719
							]
						],
						"settings":
						{
							"auto_name": "sift_descriptor.cpp",
							"function_name_status_row": 279,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4943.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "asign0710/sift.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 121,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "sift.sh",
							"function_name_status_row": 6,
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "asign0703/harris.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 113,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "harris.sh",
							"function_name_status_row": 0,
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "asign0626/get_position.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2188,
						"regions":
						{
						},
						"selection":
						[
							[
								74,
								74
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "asign0501/affin.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6281,
						"regions":
						{
						},
						"selection":
						[
							[
								542,
								542
							]
						],
						"settings":
						{
							"function_name_status_row": 21,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "asign0423/drawLine.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6574,
						"regions":
						{
						},
						"selection":
						[
							[
								633,
								633
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/camera.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6589,
						"regions":
						{
						},
						"selection":
						[
							[
								212,
								212
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "asign0619/calib_zhang.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4748,
						"regions":
						{
						},
						"selection":
						[
							[
								1794,
								1794
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.955367934118,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 222.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/gcv.sublime-build",
	"project": "cpp_practice.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 192.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
