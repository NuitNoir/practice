/*
 * PGM.cpp
 *
 *  Created on: 2015/04/10
 *      Author: kyota
 */

#include <iostream>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>
//#include <opencv2/cv.hpp>

using namespace std;
void Gauss(cv::Mat);
void Laplace(cv::Mat);
void Binalize(cv::Mat);

int main() {
	cv::Mat src = cv::imread("cat/cat1.pgm", 1);
	//cv::imwrite("out_cat1.pgm", img);
	//cv::Mat dst = cv::imwrite("out_cat1.pgm", src);

	//Gauss(src);
	//Laplace(src);
	binal(src);
}

void Gauss(cv::Mat src) {
	cv::Mat dst(src.rows, src.cols, CV_8UC1, 0);
	GaussianBlur(src, dst,cv::Size(5,5), 10, 10, 0);
	cv::imwrite("gauss.pgm", dst);
}

void Laplace(cv::Mat src) {
	cv::Mat dst(src.rows, src.cols, CV_8UC1, 0);
	int ksize = 9;
	int scale = 3;
	int delta = 5;
	Laplacian(src, dst, src.depth(), ksize, scale, delta, 0);
	cv::imwrite("laplace.pgm", dst);
}

void Binalize(cv::Mat src) {
	cv::Mat dst(src.rows, src.cols, CV_8UC1, 0);

	int blockSize = 7;
	cv::threshold(src, dst, 0, 255, cv::THRESH_BINARY);
	//cv::adaptiveThreshold(src, dst, 255.0, ADAPTIVE_THRESH_GAUSSIAN_C,  THRESH_BINARY, blockSize, 0);
			//CV_THRESH_BINARY|CV_THRESH_OTSU);

}
